import { RootState } from '@/redux/store';
import {
  Button,
  Checkbox,
  Col,
  Form,
  Input,
  message,
  Modal,
  Row,
  Select,
  Steps
} from 'antd';
import React, { FC, useState } from 'react';
import { useSelector } from 'react-redux';
import helper from '@/helpers/index';
import { registerAffiliate } from '@/queries/affilate.api';
import { Card } from '@/components/ui/card';
import { RocketIcon } from 'lucide-react';
import { sSpin } from '@/store/spin';
const banks = [
  { label: 'Ng√¢n h√†ng TMCP Ngo·∫°i th∆∞∆°ng Vi·ªát Nam (Vietcombank)', value: 'VCB' },
  { label: 'Ng√¢n h√†ng TMCP C√¥ng Th∆∞∆°ng Vi·ªát Nam (VietinBank)', value: 'CTG' },
  { label: 'Ng√¢n h√†ng TMCP K·ªπ Th∆∞∆°ng Vi·ªát Nam (Techcombank)', value: 'TCB' },
  {
    label: 'Ng√¢n h√†ng TMCP ƒê·∫ßu t∆∞ v√† Ph√°t tri·ªÉn Vi·ªát Nam (BIDV)',
    value: 'BID'
  },
  {
    label: 'Ng√¢n h√†ng N√¥ng nghi·ªáp v√† Ph√°t tri·ªÉn N√¥ng th√¥n (Agribank)',
    value: 'AGR'
  },
  { label: 'Ng√¢n h√†ng TMCP Qu√¢n ƒë·ªôi (MB Bank)', value: 'MBB' },
  { label: 'Ng√¢n h√†ng TMCP √Å Ch√¢u (ACB)', value: 'ACB' },
  { label: 'Ng√¢n h√†ng TMCP S√†i G√≤n Th∆∞∆°ng T√≠n (Sacombank)', value: 'STB' },
  { label: 'Ng√¢n h√†ng TMCP Ti√™n Phong (TPBank)', value: 'TPB' },
  { label: 'Ng√¢n h√†ng TMCP Vi·ªát Nam Th·ªãnh V∆∞·ª£ng (VPBank)', value: 'VPB' }
];
const provinces = [
  { label: 'H√† N·ªôi', value: 'HN' },
  { label: 'TP. H·ªì Ch√≠ Minh', value: 'HCM' },
  { label: 'ƒê√† N·∫µng', value: 'DN' },
  { label: 'H·∫£i Ph√≤ng', value: 'HP' },
  { label: 'C·∫ßn Th∆°', value: 'CT' },
  { label: 'An Giang', value: 'AG' },
  { label: 'B√† R·ªãa - V≈©ng T√†u', value: 'VT' },
  { label: 'B·∫Øc Giang', value: 'BG' },
  { label: 'B·∫Øc K·∫°n', value: 'BK' },
  { label: 'B·∫°c Li√™u', value: 'BL' },
  { label: 'B·∫Øc Ninh', value: 'BN' },
  { label: 'B·∫øn Tre', value: 'BT' },
  { label: 'B√¨nh ƒê·ªãnh', value: 'Bƒê' },
  { label: 'B√¨nh D∆∞∆°ng', value: 'BD' },
  { label: 'B√¨nh Ph∆∞·ªõc', value: 'BP' },
  { label: 'B√¨nh Thu·∫≠n', value: 'BTH' },
  { label: 'C√† Mau', value: 'CM' },
  { label: 'Cao B·∫±ng', value: 'CB' },
  { label: 'ƒê·∫Øk L·∫Øk', value: 'DL' },
  { label: 'ƒê·∫Øk N√¥ng', value: 'DN' },
  { label: 'ƒêi·ªán Bi√™n', value: 'DB' },
  { label: 'ƒê·ªìng Nai', value: 'ƒêN' },
  { label: 'ƒê·ªìng Th√°p', value: 'ƒêT' },
  { label: 'Gia Lai', value: 'GL' },
  { label: 'H√† Giang', value: 'HG' },
  { label: 'H√† Nam', value: 'HNa' },
  { label: 'H√† Tƒ©nh', value: 'HT' },
  { label: 'H·∫£i D∆∞∆°ng', value: 'HD' },
  { label: 'H·∫≠u Giang', value: 'HG' },
  { label: 'H√≤a B√¨nh', value: 'HB' },
  { label: 'H∆∞ng Y√™n', value: 'HY' },
  { label: 'Kh√°nh H√≤a', value: 'KH' },
  { label: 'Ki√™n Giang', value: 'KG' },
  { label: 'Kon Tum', value: 'KT' },
  { label: 'Lai Ch√¢u', value: 'LC' },
  { label: 'L√¢m ƒê·ªìng', value: 'Lƒê' },
  { label: 'L·∫°ng S∆°n', value: 'LS' },
  { label: 'L√†o Cai', value: 'LC' },
  { label: 'Long An', value: 'LA' },
  { label: 'Nam ƒê·ªãnh', value: 'Nƒê' },
  { label: 'Ngh·ªá An', value: 'NA' },
  { label: 'Ninh B√¨nh', value: 'NB' },
  { label: 'Ninh Thu·∫≠n', value: 'NT' },
  { label: 'Ph√∫ Th·ªç', value: 'PT' },
  { label: 'Qu·∫£ng B√¨nh', value: 'QB' },
  { label: 'Qu·∫£ng Nam', value: 'QN' },
  { label: 'Qu·∫£ng Ng√£i', value: 'QNG' },
  { label: 'Qu·∫£ng Ninh', value: 'QNH' },
  { label: 'Qu·∫£ng Tr·ªã', value: 'QT' },
  { label: 'S√≥c TrƒÉng', value: 'ST' },
  { label: 'S∆°n La', value: 'SL' },
  { label: 'T√¢y Ninh', value: 'TN' },
  { label: 'Th√°i B√¨nh', value: 'TB' },
  { label: 'Th√°i Nguy√™n', value: 'TN' },
  { label: 'Thanh H√≥a', value: 'TH' },
  { label: 'Th·ª´a Thi√™n Hu·∫ø', value: 'TTH' },
  { label: 'Ti·ªÅn Giang', value: 'TG' },
  { label: 'Tr√† Vinh', value: 'TV' },
  { label: 'Tuy√™n Quang', value: 'TQ' },
  { label: 'Vƒ©nh Long', value: 'VL' },
  { label: 'Vƒ©nh Ph√∫c', value: 'VP' },
  { label: 'Y√™n B√°i', value: 'YB' }
];
interface RegisterAffiliateProps {}
const { Step } = Steps;
export const RegisterAffiliate: FC<RegisterAffiliateProps> = ({}) => {
  const [current, setCurrent] = useState(0);
  const [agreed, setAgreed] = useState(false);
  const [isShow, setIsShow] = useState(false);
  const auth = useSelector((state: RootState) => state.auth.isLogin);
  const [form] = Form.useForm();
  const next = () => setCurrent(current + 1);
  const prev = () => {
    current == 1 && setAgreed(false);
    setCurrent(current - 1);
  };
  const userObject = auth
    ? JSON.parse(helper.cookie_get('user'))
    : { role: 'Guest' };
  // const userObject = { role: 'Affiliates' };
  const role = userObject?.role ?? 'Guest';
  console.log(role);
  const onFinish = (values) => {
    sSpin.set(true);
    const model = {
      bankName: values.bankName,
      bankAccountNumber: values.bankAccountNumber,
      bankBranch: values.bankBranch
    };
    console.log(model);
    registerAffiliate(model)
      .then((data) => {
        console.log(data);
        helper.cookie_set(
          'user',
          JSON.stringify({ ...userObject, role: 'Affiliates' })
        );
        next();
        message.success('B·∫°n ƒë√£ ƒëƒÉng k√Ω tr·ªü th√†nh affiliate th√†nh c√¥ng');
      })
      .catch((err) => {
        message.error('Something went wrong');
      })
      .finally(() => {
        sSpin.set(false);
      });
  };

  return (
    <>
      <Modal
        width={800}
        open={isShow}
        onCancel={() => setIsShow(false)}
        footer={null}
        title="ƒêƒÉng k√Ω tr·ªü th√†nh Affiliate"
      >
        <Steps current={current} className="mt-10">
          <Step title="B∆∞·ªõc 1" description="Gi·ªõi thi·ªáu Affiliate" />
          <Step title="B∆∞·ªõc 2" description="ƒêi·ªÅn th√¥ng tin" />
          <Step title="Ho√†n t·∫•t ƒëƒÉng k√Ω" />
        </Steps>

        <div className="flex justify-center" style={{ marginTop: 24 }}>
          {current === 0 && (
            <label>
              <div>
                <h2 className="text-center text-2xl font-bold text-[#FDCD3C]">
                  üåü Cosmotopia Affiliate ‚Äì Ki·∫øm Ti·ªÅn T·ª´ ƒêam M√™ L√†m ƒê·∫πp
                </h2>
                <p className="mt-2  text-gray-600">
                  <b>Cosmotopia Affiliate</b> l√† ch∆∞∆°ng tr√¨nh d√†nh cho nh·ªØng ai
                  y√™u th√≠ch m·ªπ ph·∫©m v√† mu·ªën ki·∫øm ti·ªÅn d·ªÖ d√†ng t·ª´ vi·ªác chia s·∫ª
                  s·∫£n ph·∫©m.
                </p>
                <div className="bg-yellow-50 mt-4   w-full  rounded-lg p-5 px-2 text-left shadow-lg">
                  <p className="flex items-center gap-2 text-gray-700">
                    üíé <b>Hoa h·ªìng h·∫•p d·∫´n</b> ‚Äì Nh·∫≠n ngay khi c√≥ ƒë∆°n h√†ng th√†nh
                    c√¥ng.
                  </p>
                  <p className="mt-2 flex items-center gap-2 text-gray-700">
                    üöÄ <b>D·ªÖ d√†ng tham gia</b> ‚Äì Ch·ªâ c·∫ßn c√≥ t√†i kho·∫£n ng√¢n h√†ng.
                  </p>
                  <p className="mt-2 flex items-center gap-2 text-gray-700">
                    ‚ú® <b>T·ª± do chia s·∫ª</b> ‚Äì Kh√¥ng c·∫ßn nh·∫≠p h√†ng, ch·ªâ c·∫ßn t·∫°o
                    link.
                  </p>
                  <p className="mt-2 flex items-center gap-2 text-gray-700">
                    üí∞ <b>Thanh to√°n nhanh ch√≥ng</b> ‚Äì R√∫t hoa h·ªìng v·ªÅ stk ng√¢n
                    h√†ng trong ng√†y.
                  </p>
                </div>
              </div>
              <input
                type="checkbox"
                onChange={(e) => setAgreed(e.target.checked)}
                className="mt-4"
              />
              T√¥i ƒë·ªìng √Ω v·ªõi ƒëi·ªÅu kho·∫£n
            </label>
          )}
        </div>

        <Form
          style={{ display: current == 1 ? '' : 'none' }}
          form={form}
          layout="vertical"
          onFinish={onFinish}
        >
          <Row gutter={24}>
            <Col span={24}>
              <Row gutter={24}>
                <Col span={12}>
                  <Form.Item
                    name="bankName"
                    label="T√™n ng√¢n h√†ng"
                    rules={[
                      {
                        required: true,
                        message: 'Please Enter Bank Name of User!'
                      }
                    ]}
                  >
                    <Select
                      placeholder="Ch·ªçn ng√¢n h√†ng"
                      options={banks}
                      className="w-full"
                      showSearch
                      optionFilterProp="label"
                      // Ch·ªâ ch·ªçn chi nh√°nh khi ƒë√£ ch·ªçn ng√¢n h√†ng
                    />
                  </Form.Item>
                </Col>
                <Col span={12}>
                  <Form.Item
                    name="bankAccountNumber"
                    label="S·ªë t√†i kho·∫£n"
                    rules={[
                      {
                        required: true,
                        message: 'Please Enter AccountNumber of User!'
                      }
                    ]}
                  >
                    <Input placeholder="Enter AccountNumber" />
                  </Form.Item>
                </Col>
              </Row>
              <Row gutter={24}>
                <Col span={12}>
                  <Form.Item
                    name="bankBranch"
                    label="Chi nh√°nh"
                    rules={[
                      {
                        required: true,
                        message: 'Please Enter bank Branch of User!'
                      }
                    ]}
                  >
                    <Select
                      placeholder="Ch·ªçn chi nh√°nh"
                      options={provinces}
                      className="w-full"
                      showSearch
                      optionFilterProp="label"
                      // Ch·ªâ ch·ªçn chi nh√°nh khi ƒë√£ ch·ªçn ng√¢n h√†ng
                    />
                  </Form.Item>
                </Col>
              </Row>
            </Col>
          </Row>

          {/*  */}
        </Form>

        {current === 2 && (
          <div className="flex  items-center justify-center bg-gray-100 p-4">
            <Card className="w-full max-w-md rounded-2xl bg-white p-6 text-center shadow-lg">
              <RocketIcon className="text-blue-500 mx-auto mb-4 h-12 w-12" />
              <h2 className="text-lg font-bold">
                üöÄ Ch√∫c m·ª´ng b·∫°n ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng! üéâ
              </h2>
              <p className="mt-2 text-sm leading-relaxed">
                Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi <strong>Cosmotopia Affiliate</strong>! Gi·ªù
                ƒë√¢y, b·∫°n ƒë√£ ch√≠nh th·ª©c tr·ªü th√†nh m·ªôt Cosmotopia Affiliate. ƒê√¢y
                l√† c∆° h·ªôi tuy·ªát v·ªùi ƒë·ªÉ ki·∫øm th√™m thu nh·∫≠p t·ª´ **ni·ªÅm ƒëam m√™ l√†m
                ƒë·∫πp** m√† kh√¥ng c·∫ßn b·ªè v·ªën hay lo l·∫Øng v·ªÅ kho h√†ng, v·∫≠n chuy·ªÉn!
              </p>
              <p className="mt-2 text-sm leading-relaxed">
                Ngay sau khi ƒëƒÉng k√Ω, b·∫°n c√≥ th·ªÉ **t·∫°o link chia s·∫ª** s·∫£n ph·∫©m
                t·ª´ Cosmotopia. M·ªói khi c√≥ ng∆∞·ªùi mua h√†ng qua link c·ªßa b·∫°n, b·∫°n
                s·∫Ω **nh·∫≠n hoa h·ªìng t·ª± ƒë·ªông**, kh√¥ng c·∫ßn l√†m g√¨ th√™m! Thanh to√°n
                s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán **trong 7 ng√†y** sau khi ƒë∆°n h√†ng ho√†n t·∫•t.
              </p>
              <p className="mt-2 text-sm leading-relaxed">
                H√£y b·∫Øt ƒë·∫ßu h√†nh tr√¨nh ki·∫øm ti·ªÅn ngay h√¥m nay**!
              </p>
              {/* <Button className="bg-blue-500 hover:bg-blue-600 mt-4 w-full rounded-lg px-4 py-2 text-white">
                üöÄ B·∫Øt ƒë·∫ßu ngay
              </Button> */}
            </Card>
          </div>
        )}
        <div style={{ marginTop: 24 }}>
          {current > 0 && (
            <Button style={{ marginRight: 8 }} onClick={prev}>
              Quay l·∫°i
            </Button>
          )}

          {(current == 0 || current == 2) && (
            <Button
              type="primary"
              onClick={
                current == 0
                  ? next
                  : () => {
                      setIsShow(false);
                    }
              }
              disabled={current === 0 && !agreed}
            >
              {current === 0 ? 'ƒê·ªìng √Ω & Ti·∫øp t·ª•c' : 'X√°c nh·∫≠n'}
            </Button>
          )}

          {current == 1 && (
            <Button
              type="primary"
              onClick={async () => {
                form.submit();
                // next();
              }}
            >
              X√°c nh√¢n ƒëƒÉng k√Ω
            </Button>
          )}
        </div>
      </Modal>
      <button
        onClick={() => {
          auth
            ? role == 'Customers'
              ? setIsShow(true)
              : message.error('B·∫°n ƒë√£ l√† affiliate')
            : message.error('B·∫°n ph·∫£i ƒëƒÉng nh·∫≠p ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y');
        }}
        className="mt-6 rounded-full bg-gradient-to-r from-purple-600 to-pink-500 px-6 py-3 font-montserrat text-lg font-semibold text-white shadow-lg transition hover:scale-105"
      >
        ƒêƒÉng k√≠ mi·ªÖn ph√≠
      </button>
    </>
  );
};
